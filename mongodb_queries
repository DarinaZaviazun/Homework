1) Знайти всіх дітей в яких сердня оцінка 4.2
db.getCollection('students').find({
    avgScore: 4.2
    })

2) Знайди всіх дітей з 1 класу
db.getCollection('students').find({
    class: 1
    })

3) Знайти всіх дітей які вивчають фізику
db.getCollection('students').find({
    lessons: "physics"
    })

4) Знайти всіх дітей, батьки яких працюють в науці ( scientist )
db.getCollection('students').find({
    "parents.profession" : "scientist"
    })

5) Знайти дітей, в яких середня оцінка більша за 4
db.getCollection('students').find({
    avgScore: {$gt: 4}
    })

6) Знайти найкращого учня
    db.getCollection('students').aggregate([
    {
       $sort: {
        avgScore: -1
        }
    },
    {
        $limit: 1
    }
    ])

7) Знайти найгіршого учня
    db.getCollection('students').aggregate([
    {
       $sort: {
        avgScore: 1
        }
    },
    {
        $limit: 1
    }
    ])

8) Знайти топ 3 учнів
    db.getCollection('students').aggregate([
    {
       $sort: {
        avgScore: -1
        }
    },
    {
        $limit: 3
    }
    ])

9) Знайти середній бал по школі
    db.getCollection('students').aggregate([
    {
       $group:
         {
             _id: 0,
           avgScoreInSchool: { $avg: "$avgScore" }
         }
    }
    ])

10) Знайти середній бал дітей які вивчають математику або фізику
    db.getCollection('students').aggregate([
        {
            $match: {
                lessons: {$in: ["physics", "mathematics"]}
                },
        },
        {
            $group: {
                _id: 0,
                avgScore: { $avg: "$avgScore" },
                }
        }
        ])

11) Знайти середній бал по 2 класі
db.getCollection('students').aggregate([
    {
        $match: {
            class: 2
            }
        },
    {
        $group: {
                _id: 0,
                avgScore: { $avg: "$avgScore" },
                }
        }
])

12) Знайти дітей з не повною сімєю
db.getCollection('students').aggregate([
    {
        $match: {
            parents: {$size: 1}
            }
        }
])

13) Знайти батьків які не працюють
db.getCollection('students').aggregate([
    {
        $match: {
            $or: [
            {parents: {$size: 2}},
            {parents: {$size: 1}},
            ],
            "parents.profession": null
        }
    },
    {
        $project: {
            parents: 1
            }
        }
])

или

db.getCollection('students').aggregate([
    {
        $unwind: "$parents"
        },
    {
        $match: {
            parents: {$exists: 1},
            "parents.profession": null
        }
    },
    {
        $project: {
            parents: 1
            }
        }
])

14) Не працюючих батьків влаштувати офіціантами
db.getCollection('students').updateMany(
{   $and: [
     {parents:{$ne: null}},
     {"parents.profession": null}]
},
{
    $set: {
        "parents.$[elem].profession": "waiter"
    }
},
{'arrayFilters':[{'elem.profession':null}]}
)

15) Вигнати дітей, які мають середній бал менше ніж 2.5
db.getCollection('students').remove({
    avgScore : {$lt: 2.5}
    })

16) Дітям, батьки яких працюють в освіті ( teacher ) поставити 5
db.getCollection('students').updateMany(
{    
     "parents.profession": "teacher"
},
{
    $set: {avgScore: 5}
}
)

17) Знайти дітей які вчаться в початковій школі (до 5 класу) і вивчають фізику ( physics )
db.getCollection('students').find({
    class: {$lt: 5},
    lessons: "physics"
    })

18) Знайти найуспішніший клас
db.getCollection('students').aggregate([
    {
        $group: {
            _id: "$class",
            avgScores: {$avg: "$avgScore"}
            }
        },
    {
        $sort: {
            avgScores: -1
            }
        },
    {
        $limit: 1
        }
])



Restaurants

1. Write a MongoDB query to display all the documents in the collection restaurants.
db.getCollection('restaurants').find({})

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
db.getCollection('restaurants').find({}, {
    name: 1,
    borough: 1,
    cuisine: 1
    })

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
db.getCollection('restaurants').find({}, {
    _id: 0,
    name: 1,
    borough: 1,
    cuisine: 1
    })

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
db.getCollection('restaurants').find({}, {
    _id: 0,
    name: 1,
    borough: 1,
    cuisine: 1,
    "address.zipcode": 1
    })

5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
db.getCollection('restaurants').find({
    borough: "Bronx"
    })

6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
db.getCollection('restaurants').find({
    borough: "Bronx"
    }).limit(5)

7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.getCollection('restaurants').find({
    borough: "Bronx"
    }).limit(5)
    .skip(5)

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
db.getCollection('restaurants').find({
   "grades.score" : {$gt: 90}
    })

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
db.getCollection('restaurants').find({
        "grades.score": {$gt: 80, $lt: 100}
    })

10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168
db.getCollection('restaurants').find({
        "address.coord.0": {$lt: -95.754168}
    })

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
db.getCollection('restaurants').find({
    $and: [
        {"address.coord.0": {$lt: -65.754168}},
        {"grades.score": {$gt: 70}},
        {cuisine: {$ne: "American "}}]
    })

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
    Note : Do this query without using $and operator.
db.getCollection('restaurants').find({
        "address.coord.0": {$lt: -65.754168},
        "grades.score": {$gt: 70},
        cuisine: {$ne: "American "}
    })

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
db.getCollection('restaurants').find({
        borough: "Brooklyn",
        "grades.grade": "A",
        cuisine: {$ne: "American "}
    }).sort({
        cuisine: -1
        })

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
db.getCollection('restaurants').find(
    {
       name: /^Wil/
    },
    {
        name: 1,
        borough: 1,
        cuisine: 1
    }
    )

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
db.getCollection('restaurants').find(
    {
       name: /ces$/
    },
    {
        name: 1,
        borough: 1,
        cuisine: 1
    }
    )

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
db.getCollection('restaurants').find(
    {
       name: /Reg/
    },
    {
        name: 1,
        borough: 1,
        cuisine: 1
    }
    )

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
db.getCollection('restaurants').find({
    borough: "Bronx",
    $or: [
    {cuisine: "American "},
    {cuisine: "Chinese"}
    ]
})

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
db.getCollection('restaurants').find({
    $or: [
    {borough: "Staten Island"},
    {borough: "Queens"},
    {borough: "Bronx"},
    {borough: "Brooklyn"}
    ]
},
{
    name: 1,
    borough: 1,
    cuisine: 1
    })

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
db.getCollection('restaurants').find({
    $nor: [
    {borough: "Staten Island"},
    {borough: "Queens"},
    {borough: "Bronx"},
    {borough: "Brooklyn"}
    ]
},
{
    name: 1,
    borough: 1,
    cuisine: 1
    })

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
db.getCollection('restaurants').find({
    "grades.score": {$lt: 10}
},
{
    name: 1,
    borough: 1,
    cuisine: 1
    })

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
db.getCollection('restaurants').find({
$or:[
    {
        $and:[
            {cuisine: {$ne: "American "}},
            {cuisine: {$ne: "Chinise"}}
        ]
        },
    {name: /^Wil/}
    ]
},
{
    name: 1,
    borough: 1,
    cuisine: 1
    })

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..
db.getCollection('restaurants').find({
    $and:[
    {"grades.grade": "A"},
    {"grades.date": ISODate("2014-08-11T00:00:00Z")},
    {"grades.score": 11}
    ]
},
{
    name: 1,
    grades: 1
    })

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
db.getCollection('restaurants').find({
    $and:[
    {"grades.1.grade": "A"},
    {"grades.1.date": ISODate("2014-08-11T00:00:00Z")},
    {"grades.1.score": 9}
    ]
},
{
    name: 1,
    grades: 1
    })

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..
db.getCollection('restaurants').find({
    "address.coord.1": {$gt: 42, $lte: 52} 
},
{
    name: 1,
    address: 1
    })

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
db.getCollection('restaurants').find({
}).sort({
    name: 1
    })

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.
db.getCollection('restaurants').find({
}).sort({
    name: -1
    })

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
db.getCollection('restaurants').find({
}).sort(
    {cuisine: 1},
    {borough: -1}
    )

28. Write a MongoDB query to know whether all the addresses contains the street or not.
db.getCollection('restaurants').find({
    "address.street": null
})

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
db.getCollection('restaurants').find({ 
    "address.coord": {$type: "double"}
})

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
db.getCollection('restaurants').find({
    "grades.score": {$mod: [7, 0]}
    },
    {
      names: 1,
      grades: 1  
        })

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.
db.getCollection('restaurants').find(
    {
       name: /mon/
    },
    {
	_id: 0,
        name: 1,
        borough: 1,
        cuisine: 1,
	"address.coord": 1
    }
    )

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
db.getCollection('restaurants').find(
    {
       name: /^Mad/
    },
    {
	_id: 0,
        name: 1,
        borough: 1,
        cuisine: 1,
	"address.coord": 1
    }
    )
